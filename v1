import React, { useState, useEffect, useCallback, useRef } from 'react';
import { initializeApp } from 'firebase/app';
import { 
    getFirestore, collection, onSnapshot, addDoc, doc, updateDoc, deleteDoc, 
    query, runTransaction, getDocs, where, writeBatch, serverTimestamp, orderBy, getDoc, setDoc
} from 'firebase/firestore';
import { 
    getAuth, onAuthStateChanged, signInAnonymously, signOut
} from 'firebase/auth';

// Note: Scanner and PDF/CSV export functionalities are placeholder buttons.
// The scanner is re-implemented via CDN to avoid build issues.

// --- Firebase Configuration ---
const firebaseConfig = typeof __firebase_config !== 'undefined'
    ? JSON.parse(__firebase_config)
    : {
        apiKey: "YOUR_API_KEY", authDomain: "YOUR_AUTH_DOMAIN", projectId: "YOUR_PROJECT_ID",
        storageBucket: "YOUR_STORAGE_BUCKET", messagingSenderId: "YOUR_MESSAGING_SENDER_ID", appId: "YOUR_APP_ID"
    };

// --- Firebase Initialization ---
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

// --- App ID ---
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-dental-inventory-final';

// --- Helper Hooks & Components ---
const useMediaQuery = (query) => {
    const [matches, setMatches] = useState(window.matchMedia(query).matches);
    useEffect(() => {
        const media = window.matchMedia(query);
        const listener = () => setMatches(media.matches);
        media.addEventListener('change', listener);
        return () => media.removeEventListener('change', listener);
    }, [query]);
    return matches;
};

const Icon = ({ path, className = "h-6 w-6" }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
        <path strokeLinecap="round" strokeLinejoin="round" d={path} />
    </svg>
);

const icons = {
    plus: "M12 6v6m0 0v6m0-6h6m-6 0H6",
    search: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z",
    edit: "M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L15.232 5.232z",
    delete: "M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16",
    close: "M6 18L18 6M6 6l12 12",
    plusCircle: "M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z",
    minusCircle: "M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z",
    history: "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z",
    camera: "M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2zm12 6a4 4 0 10-8 0 4 4 0 008 0z",
    print: "M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm7-8a2 2 0 11-4 0 2 2 0 014 0z",
    upload: "M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12",
    shoppingCart: "M3 1a1 1 0 000 2h1.22l.34 1.7a1 1 0 00.97.8H16.5a1 1 0 00.97-.8l1.34-6.7a1 1 0 00-.97-1.2H4.22L4 2.3A1 1 0 003 1zM5 12a2 2 0 100 4 2 2 0 000-4zm10 0a2 2 0 100 4 2 2 0 000-4z",
};

const Modal = ({ isOpen, onClose, children, title, size = '2xl' }) => {
    if (!isOpen) return null;
    const sizeClasses = { 'lg': 'max-w-lg', '2xl': 'max-w-2xl', '4xl': 'max-w-4xl' };
    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4">
            <div className={`bg-white rounded-lg shadow-2xl w-full ${sizeClasses[size]}`}>
                <div className="p-4 border-b flex justify-between items-center">
                    <h2 className="text-xl font-bold text-gray-800">{title}</h2>
                    {onClose && <button onClick={onClose} className="text-gray-500 hover:text-gray-800"><Icon path={icons.close} /></button>}
                </div>
                {children}
            </div>
        </div>
    );
};

// --- Main Application ---
const App = () => {
    const [user, setUser] = useState(null);
    const [inventory, setInventory] = useState([]);
    const [filteredInventory, setFilteredInventory] = useState([]);
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [modal, setModal] = useState({ type: null, data: null });
    const [manualOrderList, setManualOrderList] = useState([]);
    const isMobile = useMediaQuery('(max-width: 768px)');
    
    useEffect(() => {
        const script = document.createElement('script');
        script.src = "https://unpkg.com/html5-qrcode@2.0.9/dist/html5-qrcode.min.js";
        script.async = true;
        document.body.appendChild(script);

        const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
            if (currentUser) {
                setUser(currentUser);
            } else {
                try {
                    await signInAnonymously(auth);
                } catch (error) {
                    console.error("Anonymous sign-in failed", error);
                }
            }
            setLoading(false);
        });
        return () => {
            unsubscribe();
            if (document.body.contains(script)) {
                document.body.removeChild(script);
            }
        };
    }, []);

    const addDummyData = async (userId) => {
        const inventoryPath = `artifacts/${appId}/users/${userId}/inventory`;
        const inventoryCollectionRef = collection(db, inventoryPath);
        const batch = writeBatch(db);

        const dummyItems = [
            { name: 'Kompositspritze A2', herstellernummer: '987654321', interneArtikelnummer: '1001', quantity: 8, minStock: 10, maxStock: 20, supplier: 'Dental Direkt', storageLocation: 'Schublade 3', expiryDate: '2025-12-31' },
            { name: 'Einmalhandschuhe M', herstellernummer: '123456789', interneArtikelnummer: '1002', quantity: 250, minStock: 100, maxStock: 500, supplier: 'Medi-Gross', storageLocation: 'Regal 1A', expiryDate: '' },
            { name: 'Lidocain 2%', herstellernummer: '112233445', interneArtikelnummer: '1003', quantity: 45, minStock: 50, maxStock: 100, supplier: 'Pharma-Welt', storageLocation: 'Kühlschrank', expiryDate: '2026-05-30' },
            { name: 'Watterollen', herstellernummer: '556677889', interneArtikelnummer: '1004', quantity: 800, minStock: 500, maxStock: 2000, supplier: 'Dental Direkt', storageLocation: 'Regal 2B', expiryDate: '' },
            { name: 'Desinfektionstücher', herstellernummer: '998877665', interneArtikelnummer: '1005', quantity: 15, minStock: 10, maxStock: 30, supplier: 'Medi-Gross', storageLocation: 'Behandlungsraum 1', expiryDate: '2025-08-15' },
            { name: 'Abformlöffel OK-1', herstellernummer: '223344556', interneArtikelnummer: '1006', quantity: 12, minStock: 10, maxStock: 25, supplier: 'Profi-Dental', storageLocation: 'Schrank 5', expiryDate: '' },
            { name: 'Prophylaxepaste', herstellernummer: '334455667', interneArtikelnummer: '1007', quantity: 22, minStock: 20, maxStock: 40, supplier: 'Dental Direkt', storageLocation: 'Schublade 3', expiryDate: '2025-09-20' },
            { name: 'Mundspülbecher', herstellernummer: '445566778', interneArtikelnummer: '1008', quantity: 400, minStock: 200, maxStock: 1000, supplier: 'Medi-Gross', storageLocation: 'Regal 1A', expiryDate: '' },
        ];

        dummyItems.forEach(item => {
            const docRef = doc(inventoryCollectionRef);
            batch.set(docRef, {...item, lastUpdated: serverTimestamp()});
        });

        await batch.commit();
    };

    useEffect(() => {
        if (!user) return;
        
        const inventoryPath = `artifacts/${appId}/users/${user.uid}/inventory`;
        const q = query(collection(db, inventoryPath));
        
        const unsubscribe = onSnapshot(q, (snapshot) => {
            if (snapshot.empty) {
                addDummyData(user.uid);
            } else {
                const items = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                items.sort((a,b) => (a.name || '').localeCompare(b.name || ''));
                setInventory(items);
            }
        }, (err) => {
            console.error("Firestore snapshot error:", err);
        });

        return () => unsubscribe();
    }, [user]);

    useEffect(() => {
        const results = inventory.filter(item =>
            (item.name?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
            (item.herstellernummer?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
            (item.interneArtikelnummer?.toLowerCase() || '').includes(searchTerm.toLowerCase())
        );
        setFilteredInventory(results);
    }, [searchTerm, inventory]);

    const handleOpenModal = (type, data = null) => setModal({ type, data });
    const handleCloseModal = () => setModal({ type: null, data: null });
    
    const handleSignOut = async () => {
        await signOut(auth);
        setUser(null);
        setInventory([]);
    };
    
    const handleItemSelectedForTransaction = (item, type) => {
        handleCloseModal();
        setTimeout(() => handleOpenModal(type, item), 50);
    };

    const handleToggleManualOrder = (itemId) => {
        setManualOrderList(prev => 
            prev.includes(itemId) 
                ? prev.filter(id => id !== itemId)
                : [...prev, itemId]
        );
    };

    if (loading || !user) {
        return <div className="h-screen flex items-center justify-center">Lade & Authentifiziere...</div>;
    }
    
    return (
        <div className="bg-gray-100 min-h-screen font-sans">
            <header className="bg-white shadow-md p-4 flex justify-between items-center">
                <h1 className="text-xl font-bold text-gray-800">Lagerverwaltung</h1>
                <div>
                    <span className="text-sm text-gray-600 mr-4">Benutzer: {user.uid.substring(0, 8)}</span>
                    <button onClick={handleSignOut} className="text-sm text-blue-600 hover:underline">Ausloggen</button>
                </div>
            </header>

            <main>
                {isMobile ? (
                    <MobileView inventory={filteredInventory} onOpenModal={handleOpenModal} />
                ) : (
                    <DesktopView 
                        inventory={inventory} 
                        filteredInventory={filteredInventory} 
                        onOpenModal={handleOpenModal} 
                        searchTerm={searchTerm} 
                        setSearchTerm={setSearchTerm}
                        manualOrderList={manualOrderList}
                        onToggleManualOrder={handleToggleManualOrder}
                    />
                )}
            </main>
            
            <ItemFormModal
                isOpen={modal.type === 'new' || modal.type === 'edit'}
                onClose={handleCloseModal}
                item={modal.data}
                userId={user?.uid}
                inventory={inventory}
            />
            <TransactionModal
                isOpen={modal.type === 'eingang' || modal.type === 'ausgang'}
                onClose={handleCloseModal}
                item={modal.data}
                type={modal.type}
                userId={user?.uid}
            />
            <HistoryModal
                isOpen={modal.type === 'history'}
                onClose={handleCloseModal}
                item={modal.data}
                userId={user?.uid}
            />
             <PrintModal
                isOpen={modal.type === 'print'}
                onClose={handleCloseModal}
                items={modal.data}
            />
            <ImportModal
                isOpen={modal.type === 'import'}
                onClose={handleCloseModal}
                userId={user?.uid}
            />
            <ItemSelectionModal
                isOpen={modal.type === 'select_eingang' || modal.type === 'select_ausgang'}
                onClose={handleCloseModal}
                inventory={inventory}
                onItemSelected={handleItemSelectedForTransaction}
                transactionType={modal.type === 'select_eingang' ? 'eingang' : 'ausgang'}
            />
        </div>
    );
};

// --- View Components ---
const Dashboard = ({ inventory, manualOrderList }) => {
    const now = new Date();
    const ninetyDaysFromNow = new Date();
    ninetyDaysFromNow.setDate(now.getDate() + 90);

    const toReorderAuto = inventory.filter(item => Number(item.quantity) <= Number(item.minStock));
    const toReorderManual = inventory.filter(item => manualOrderList.includes(item.id));
    
    const combinedReorder = [...toReorderAuto, ...toReorderManual];
    const toReorder = [...new Map(combinedReorder.map(item => [item.id, item])).values()];


    const expiringSoon = inventory.filter(item => {
        if (!item.expiryDate) return false;
        const expiry = new Date(item.expiryDate);
        return expiry > now && expiry <= ninetyDaysFromNow;
    });

    return (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div className="bg-white p-4 rounded-lg shadow">
                <h3 className="font-bold text-lg text-red-600 mb-2">Artikel zum Nachbestellen ({toReorder.length})</h3>
                {toReorder.length > 0 ? (
                    <ul className="divide-y divide-gray-200 max-h-40 overflow-y-auto">
                        {toReorder.map(item => (
                            <li key={item.id} className="py-2 flex justify-between items-center">
                                <span>{item.name}</span>
                                <span className="font-mono text-red-500">Bestand: {item.quantity}</span>
                            </li>
                        ))}
                    </ul>
                ) : (
                    <p className="text-gray-500 text-sm">Alles auf Lager!</p>
                )}
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
                <h3 className="font-bold text-lg text-yellow-600 mb-2">Läuft bald ab ({expiringSoon.length})</h3>
                 {expiringSoon.length > 0 ? (
                    <ul className="divide-y divide-gray-200 max-h-40 overflow-y-auto">
                        {expiringSoon.map(item => (
                            <li key={item.id} className="py-2 flex justify-between items-center">
                                <span>{item.name}</span>
                                <span className="font-mono text-sm">{new Date(item.expiryDate).toLocaleDateString('de-DE')}</span>
                            </li>
                        ))}
                    </ul>
                ) : (
                    <p className="text-gray-500 text-sm">Keine Artikel laufen bald ab.</p>
                )}
            </div>
        </div>
    );
};

const DesktopView = ({ inventory, filteredInventory, onOpenModal, searchTerm, setSearchTerm, manualOrderList, onToggleManualOrder }) => (
    <div className="p-4">
        <Dashboard inventory={inventory} manualOrderList={manualOrderList} />
        <div className="flex justify-between items-center mb-4">
            <div className="relative w-full max-w-md">
                <input type="text" placeholder="Suchen..." className="w-full pl-4 pr-4 py-2 border rounded-lg" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
            </div>
            <div className="flex items-center gap-2">
                 <button onClick={() => onOpenModal('select_eingang')} className="bg-green-600 text-white px-4 py-2 rounded-lg flex items-center gap-2">
                    <Icon path={icons.plusCircle} className="h-5 w-5" /> Eingang
                </button>
                 <button onClick={() => onOpenModal('select_ausgang')} className="bg-yellow-500 text-white px-4 py-2 rounded-lg flex items-center gap-2">
                    <Icon path={icons.minusCircle} className="h-5 w-5" /> Ausgang
                </button>
                <button onClick={() => onOpenModal('new')} className="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2">
                    <Icon path={icons.plus} className="h-5 w-5" /> Neuer Artikel
                </button>
                 <div className="border-l h-8 mx-2"></div>
                 <button onClick={() => onOpenModal('import')} className="bg-gray-500 text-white px-4 py-2 rounded-lg flex items-center gap-1">
                    <Icon path={icons.upload} className="h-5 w-5" /> Importieren
                 </button>
                 <button onClick={() => {
                     const toReorderAuto = inventory.filter(item => Number(item.quantity) <= Number(item.minStock));
                     const toReorderManual = inventory.filter(item => manualOrderList.includes(item.id));
                     const combinedReorder = [...toReorderAuto, ...toReorderManual];
                     const toReorder = [...new Map(combinedReorder.map(item => [item.id, item])).values()];
                     onOpenModal('print', toReorder);
                 }} className="bg-gray-500 text-white px-4 py-2 rounded-lg flex items-center gap-1">
                    <Icon path={icons.print} className="h-5 w-5" /> Drucken
                </button>
            </div>
        </div>
        <InventoryTable inventory={filteredInventory} onOpenModal={onOpenModal} manualOrderList={manualOrderList} onToggleManualOrder={onToggleManualOrder} />
    </div>
);

const MobileView = ({ inventory, onOpenModal }) => (
    <div className="pb-20">
        <div className="p-4 space-y-3">
            {inventory.map(item => <InventoryCard key={item.id} item={item} onOpenModal={onOpenModal} />)}
        </div>
        <BottomNavBar onOpenModal={onOpenModal} />
    </div>
);

const InventoryTable = ({ inventory, onOpenModal, manualOrderList, onToggleManualOrder }) => (
    <div className="bg-white rounded-lg shadow-xl overflow-hidden">
        <table className="w-full text-left">
            <thead className="bg-gray-50">
                <tr>
                    {['Artikel', 'Nummern', 'Lieferant', 'Bestand', 'Ablaufdatum', 'Aktionen'].map(h => <th key={h} className="p-3 text-xs font-medium text-gray-500 uppercase">{h}</th>)}
                </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
                {inventory.map(item => (
                    <tr key={item.id} className="hover:bg-gray-50">
                        <td className="p-3">{item.name}</td>
                        <td className="p-3 text-sm text-gray-500">
                            <div>Int: {item.interneArtikelnummer}</div>
                            <div>Herst: {item.herstellernummer}</div>
                        </td>
                        <td className="p-3 text-sm text-gray-500">{item.supplier}</td>
                        <td className="p-3">{item.quantity}</td>
                        <td className="p-3">{item.expiryDate}</td>
                        <td className="p-3">
                            <div className="flex justify-center items-center gap-2">
                                <button onClick={() => onToggleManualOrder(item.id)} className={`p-1 rounded-full ${manualOrderList.includes(item.id) ? 'text-blue-600 bg-blue-100' : 'text-gray-400 hover:text-gray-600'}`} title="Zur Bestellung hinzufügen">
                                    <Icon path={icons.shoppingCart} className="h-5 w-5" />
                                </button>
                                <button onClick={() => onOpenModal('eingang', item)} className="p-1 text-green-600" title="Wareneingang"><Icon path={icons.plusCircle} /></button>
                                <button onClick={() => onOpenModal('ausgang', item)} className="p-1 text-yellow-600" title="Warenausgang"><Icon path={icons.minusCircle} /></button>
                                <button onClick={() => onOpenModal('history', item)} className="p-1 text-gray-500" title="Historie"><Icon path={icons.history} className="h-5 w-5"/></button>
                                <button onClick={() => onOpenModal('edit', item)} className="p-1 text-indigo-600" title="Bearbeiten"><Icon path={icons.edit} className="h-5 w-5"/></button>
                                <button onClick={() => onOpenModal('delete', item)} className="p-1 text-red-600" title="Löschen"><Icon path={icons.delete} className="h-5 w-5"/></button>
                            </div>
                        </td>
                    </tr>
                ))}
            </tbody>
        </table>
    </div>
);

const InventoryCard = ({ item, onOpenModal }) => (
     <div className="bg-white p-4 rounded-lg shadow">
        <div className="flex justify-between items-start">
            <div>
                <p className="font-bold text-gray-800">{item.name}</p>
                <p className="text-sm text-gray-500">{item.supplier}</p>
                <p className="text-sm text-gray-500">Bestand: {item.quantity}</p>
            </div>
        </div>
         <div className="flex justify-end items-center gap-2 mt-2">
            <button onClick={() => onOpenModal('eingang', item)} className="p-2 text-green-600" title="Wareneingang"><Icon path={icons.plusCircle} /></button>
            <button onClick={() => onOpenModal('ausgang', item)} className="p-2 text-yellow-600" title="Warenausgang"><Icon path={icons.minusCircle} /></button>
            <button onClick={() => onOpenModal('edit', item)} className="p-2 text-indigo-600" title="Bearbeiten"><Icon path={icons.edit} className="h-5 w-5"/></button>
         </div>
    </div>
);

const BottomNavBar = ({ onOpenModal }) => (
    <div className="fixed bottom-0 left-0 right-0 bg-white shadow-t-md h-16 flex justify-around items-center">
        <button onClick={() => onOpenModal('select_eingang')} className="flex flex-col items-center text-green-600"><Icon path={icons.plusCircle} /><span className="text-xs">Eingang</span></button>
        <button onClick={() => onOpenModal('select_ausgang')} className="flex flex-col items-center text-yellow-600"><Icon path={icons.minusCircle} /><span className="text-xs">Ausgang</span></button>
        <button onClick={() => onOpenModal('search')} className="flex flex-col items-center text-gray-600"><Icon path={icons.search} /><span className="text-xs">Suchen</span></button>
        <button onClick={() => onOpenModal('new')} className="flex flex-col items-center text-blue-600"><Icon path={icons.plus} className="h-6 w-6"/><span className="text-xs">Neu</span></button>
    </div>
);

// --- Modal Components ---
const ItemFormModal = ({ isOpen, onClose, item, userId, inventory }) => {
    const initialFormState = {
        name: '', herstellernummer: '', interneArtikelnummer: '', quantity: 0,
        minStock: 1, maxStock: '', supplier: '', storageLocation: '', expiryDate: ''
    };
    const [formData, setFormData] = useState(initialFormState);
    const [showScanner, setShowScanner] = useState(false);

    useEffect(() => {
        if (isOpen) {
            if (item) {
                setFormData({ ...initialFormState, ...item });
            } else {
                let maxNum = 1000;
                if (inventory && inventory.length > 0) {
                    inventory.forEach(invItem => {
                        const num = parseInt(invItem.interneArtikelnummer, 10);
                        if (!isNaN(num) && num > maxNum) {
                            maxNum = num;
                        }
                    });
                }
                const nextNum = (maxNum + 1).toString();
                setFormData({ ...initialFormState, interneArtikelnummer: nextNum });
            }
            setShowScanner(false);
        }
    }, [isOpen, item, inventory]);

    useEffect(() => {
        if (!isOpen || !showScanner) {
            return;
        }

        let html5QrcodeScanner;

        const onScanSuccess = (decodedText, decodedResult) => {
            setFormData(prev => ({ ...prev, herstellernummer: decodedText }));
            setShowScanner(false);
        };

        const onScanFailure = (error) => { /* Can be ignored */ };

        if (window.Html5QrcodeScanner) {
            html5QrcodeScanner = new window.Html5QrcodeScanner(
                "new-item-scanner",
                { fps: 10, qrbox: { width: 250, height: 250 } },
                false
            );
            html5QrcodeScanner.render(onScanSuccess, onScanFailure);
        }

        return () => {
            if (html5QrcodeScanner) {
                html5QrcodeScanner.clear().catch(error => {
                    console.error("Scanner cleanup failed.", error);
                });
            }
        };
    }, [isOpen, showScanner]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!userId) return;
        
        const inventoryPath = `artifacts/${appId}/users/${userId}/inventory`;
        const inventoryCollectionRef = collection(db, inventoryPath);
        
        const dataToSave = {
            ...formData,
            quantity: Number(formData.quantity),
            minStock: Number(formData.minStock),
            maxStock: Number(formData.maxStock) || null,
            lastUpdated: serverTimestamp()
        };

        try {
            if (item) {
                await updateDoc(doc(db, inventoryPath, item.id), dataToSave);
            } else {
                await addDoc(inventoryCollectionRef, dataToSave);
            }
            onClose();
        } catch (error) {
            console.error("Error saving item:", error);
            alert("Fehler beim Speichern des Artikels.");
        }
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={item ? 'Artikel bearbeiten' : 'Neuer Artikel'}>
            {showScanner ? (
                <div className="p-6">
                    <div id="new-item-scanner" className="w-full"></div>
                    <button onClick={() => setShowScanner(false)} className="mt-4 w-full bg-gray-200 px-4 py-2 rounded-lg">Zurück zum Formular</button>
                </div>
            ) : (
                <form onSubmit={handleSubmit} className="p-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="md:col-span-2">
                            <label>Artikelname</label>
                            <input name="name" value={formData.name} onChange={handleChange} required className="w-full border-gray-300 rounded-md"/>
                        </div>
                        <div>
                            <label>Hersteller-Nr.</label>
                            <input name="herstellernummer" value={formData.herstellernummer} onChange={handleChange} className="w-full border-gray-300 rounded-md"/>
                        </div>
                         <div>
                            <label>Interne Art.-Nr.</label>
                            <input name="interneArtikelnummer" value={formData.interneArtikelnummer} onChange={handleChange} className="w-full border-gray-300 rounded-md"/>
                        </div>
                        <div>
                            <label>Anfangsbestand</label>
                            <input name="quantity" type="number" value={formData.quantity} onChange={handleChange} required disabled={!!item} className="w-full border-gray-300 rounded-md"/>
                        </div>
                         <div>
                            <label>Mindestbestand</label>
                            <input name="minStock" type="number" value={formData.minStock} onChange={handleChange} required className="w-full border-gray-300 rounded-md"/>
                        </div>
                         <div>
                            <label>Maximalbestand</label>
                            <input name="maxStock" type="number" value={formData.maxStock} onChange={handleChange} className="w-full border-gray-300 rounded-md"/>
                        </div>
                        <div>
                            <label>Lagerort</label>
                            <input name="storageLocation" value={formData.storageLocation} onChange={handleChange} className="w-full border-gray-300 rounded-md"/>
                        </div>
                        <div>
                            <label>Lieferant</label>
                            <input name="supplier" value={formData.supplier} onChange={handleChange} className="w-full border-gray-300 rounded-md"/>
                        </div>
                        <div>
                            <label>Ablaufdatum</label>
                            <input name="expiryDate" type="date" value={formData.expiryDate} onChange={handleChange} className="w-full border-gray-300 rounded-md"/>
                        </div>
                    </div>
                    <div className="mt-6 flex justify-between items-center">
                         <button
                            type="button"
                            onClick={() => setShowScanner(true)}
                            className="flex items-center gap-2 px-4 py-2 bg-gray-500 text-white font-semibold rounded-lg shadow-md hover:bg-gray-600 transition-colors"
                        >
                            <Icon path={icons.camera} className="h-5 w-5" />
                            <span>Scannen</span>
                        </button>
                        <div className="flex gap-3">
                            <button type="button" onClick={onClose} className="px-4 py-2 bg-gray-200 text-gray-800 font-semibold rounded-lg hover:bg-gray-300 transition-colors">Abbrechen</button>
                            <button type="submit" className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition-colors">{item ? 'Speichern' : 'Erstellen'}</button>
                        </div>
                    </div>
                </form>
            )}
        </Modal>
    );
};

const TransactionModal = ({ isOpen, onClose, item, type, userId }) => {
    const [amount, setAmount] = useState(1);

    useEffect(() => {
        if (isOpen) {
            setAmount(1);
        }
    }, [isOpen]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!item || !userId || amount <= 0) return;
        
        const itemRef = doc(db, `artifacts/${appId}/users/${userId}/inventory`, item.id);
        
        try {
            await runTransaction(db, async (transaction) => {
                const itemDoc = await transaction.get(itemRef);
                if (!itemDoc.exists()) throw "Artikel nicht gefunden.";

                const currentQuantity = itemDoc.data().quantity || 0;
                const change = type === 'eingang' ? Number(amount) : -Number(amount);
                const newQuantity = currentQuantity + change;

                if (newQuantity < 0) throw "Bestand kann nicht negativ sein.";
                
                transaction.update(itemRef, { quantity: newQuantity, lastUpdated: serverTimestamp() });
                
                const historyCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/history`);
                transaction.set(doc(historyCollectionRef), {
                    itemId: item.id,
                    itemName: item.name,
                    type,
                    amount: Number(amount),
                    quantityBefore: currentQuantity,
                    quantityAfter: newQuantity,
                    timestamp: serverTimestamp(),
                    user: auth.currentUser.uid,
                });
            });
            onClose();
        } catch (error) {
            console.error("Transaction failed:", error);
            alert("Fehler: " + error.message);
        }
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={type === 'eingang' ? 'Wareneingang' : 'Warenausgang'}>
            <form onSubmit={handleSubmit} className="p-6">
                <p className="mb-4">Artikel: <span className="font-bold">{item?.name}</span></p>
                <p className="mb-4">Aktueller Bestand: <span className="font-bold">{item?.quantity}</span></p>
                <div>
                    <label>Menge</label>
                    <input type="number" value={amount} onChange={e => setAmount(e.target.value)} min="1" required className="w-full border-gray-300 rounded-md"/>
                </div>
                <div className="mt-6 flex justify-end gap-3">
                    <button type="button" onClick={onClose} className="bg-gray-200 px-4 py-2 rounded-lg">Abbrechen</button>
                    <button type="submit" className={`text-white px-4 py-2 rounded-lg ${type === 'eingang' ? 'bg-green-600' : 'bg-yellow-600'}`}>
                        {type === 'eingang' ? 'Zugang buchen' : 'Abgang buchen'}
                    </button>
                </div>
            </form>
        </Modal>
    );
};

const HistoryModal = ({ isOpen, onClose, item, userId }) => {
    const [history, setHistory] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        if (!isOpen || !userId || !item) return;

        setLoading(true);
        const historyPath = `artifacts/${appId}/users/${userId}/history`;
        const q = query(collection(db, historyPath), where("itemId", "==", item.id));

        const unsubscribe = onSnapshot(q, (snapshot) => {
            const historyData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            historyData.sort((a, b) => b.timestamp?.seconds - a.timestamp?.seconds);
            setHistory(historyData);
            setLoading(false);
        }, (err) => {
            console.error("History fetch error:", err);
            setLoading(false);
        });

        return () => unsubscribe();
    }, [isOpen, userId, item]);

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={`Historie für: ${item?.name}`} size="4xl">
            <div className="p-6 max-h-[70vh] overflow-y-auto">
                {loading ? <p>Lade Historie...</p> : (
                    <table className="w-full text-left">
                        <thead className="bg-gray-50">
                            <tr>
                                <th className="px-4 py-2 text-xs font-medium text-gray-500 uppercase">Datum</th>
                                <th className="px-4 py-2 text-xs font-medium text-gray-500 uppercase">Typ</th>
                                <th className="px-4 py-2 text-xs font-medium text-gray-500 uppercase text-right">Menge</th>
                                <th className="px-4 py-2 text-xs font-medium text-gray-500 uppercase text-right">Bestand danach</th>
                            </tr>
                        </thead>
                        <tbody className="divide-y divide-gray-200">
                            {history.length > 0 ? history.map(t => (
                                <tr key={t.id}>
                                    <td className="px-4 py-2 text-sm text-gray-500">{t.timestamp ? new Date(t.timestamp.seconds * 1000).toLocaleString('de-DE') : 'N/A'}</td>
                                    <td className="px-4 py-2 text-sm"><span className={`font-semibold ${t.type === 'eingang' ? 'text-green-600' : 'text-yellow-600'}`}>{t.type}</span></td>
                                    <td className={`px-4 py-2 text-sm text-right font-mono ${t.type === 'eingang' ? 'text-green-600' : 'text-yellow-600'}`}>{t.type === 'eingang' ? '+' : '-'}{t.amount}</td>
                                    <td className="px-4 py-2 text-sm text-right font-mono text-gray-700">{t.quantityAfter}</td>
                                </tr>
                            )) : <tr><td colSpan="4" className="text-center py-10 text-gray-500">Keine Historie für diesen Artikel vorhanden.</td></tr>}
                        </tbody>
                    </table>
                )}
            </div>
        </Modal>
    );
};

const PrintModal = ({ isOpen, onClose, items }) => {
    const [orderQuantities, setOrderQuantities] = useState({});

    useEffect(() => {
        if (isOpen && items) {
            const initialQuantities = {};
            items.forEach(item => {
                const orderAmount = (item.maxStock || item.minStock || 0) - (item.quantity || 0);
                initialQuantities[item.id] = orderAmount > 0 ? orderAmount : 1;
            });
            setOrderQuantities(initialQuantities);
        }
    }, [isOpen, items]);

    const handleQuantityChange = (itemId, value) => {
        setOrderQuantities(prev => ({ ...prev, [itemId]: Number(value) }));
    };

    const handlePrint = () => {
        const printWindow = window.open('', '_blank');
        printWindow.document.write('<html><head><title>Bestellliste</title>');
        printWindow.document.write('<style>body{font-family:sans-serif; margin: 20px;} table{width:100%; border-collapse:collapse;} th,td{border:1px solid #ddd; padding:8px; text-align:left;}</style>');
        printWindow.document.write('</head><body>');
        printWindow.document.write('<h1>Bestellliste</h1>');
        printWindow.document.write('<table><thead><tr><th>Artikel</th><th>Lieferant</th><th>Hersteller Nr.</th><th>Bestellmenge</th></tr></thead><tbody>');
        items.forEach(item => {
            printWindow.document.write(`<tr><td>${item.name || ''}</td><td>${item.supplier || ''}</td><td>${item.herstellernummer || ''}</td><td>${orderQuantities[item.id] || ''}</td></tr>`);
        });
        printWindow.document.write('</tbody></table>');
        printWindow.document.write('</body></html>');
        printWindow.document.close();
        printWindow.print();
    };

    if (!isOpen) return null;

    return (
        <Modal isOpen={isOpen} onClose={onClose} title="Bestellliste anpassen & Drucken" size="4xl">
            <div className="p-6">
                <div className="max-h-96 overflow-y-auto mb-6">
                    <table className="w-full text-left">
                        <thead className="bg-gray-50 sticky top-0">
                            <tr>
                                <th className="p-2 text-sm">Artikel</th>
                                <th className="p-2 text-sm">Lieferant</th>
                                <th className="p-2 text-sm">Akt. Bestand</th>
                                <th className="p-2 text-sm">Bestellmenge</th>
                            </tr>
                        </thead>
                        <tbody className="divide-y divide-gray-200">
                            {items && items.length > 0 ? items.map(item => (
                                <tr key={item.id}>
                                    <td className="p-2">{item.name}</td>
                                    <td className="p-2 text-sm text-gray-600">{item.supplier}</td>
                                    <td className="p-2">{item.quantity}</td>
                                    <td className="p-2">
                                        <input 
                                            type="number" 
                                            value={orderQuantities[item.id] || ''}
                                            onChange={(e) => handleQuantityChange(item.id, e.target.value)}
                                            className="w-20 p-1 border rounded-md"
                                        />
                                    </td>
                                </tr>
                            )) : <tr><td colSpan="4" className="text-center py-10 text-gray-500">Keine Artikel zum Bestellen.</td></tr>}
                        </tbody>
                    </table>
                </div>
                <div className="flex justify-end gap-3">
                     <button type="button" onClick={onClose} className="bg-gray-200 px-4 py-2 rounded-lg">Schliessen</button>
                    <button onClick={handlePrint} className="bg-blue-600 text-white px-4 py-2 rounded-lg" disabled={!items || items.length === 0}>
                        Drucken
                    </button>
                </div>
            </div>
        </Modal>
    );
};

const ImportModal = ({ isOpen, onClose, userId }) => {
    const [file, setFile] = useState(null);
    const [isImporting, setIsImporting] = useState(false);
    const [error, setError] = useState('');
    const fileInputRef = useRef(null);

    const handleFileChange = (e) => {
        const selectedFile = e.target.files[0];
        if (selectedFile && selectedFile.type === "text/csv") {
            setFile(selectedFile);
            setError('');
        } else {
            setError("Bitte wählen Sie eine gültige .csv-Datei aus.");
            setFile(null);
        }
    };

    const handleImport = async () => {
        if (!file || !userId) return;
        setIsImporting(true);
        setError('');

        const reader = new FileReader();
        reader.onload = async (event) => {
            const csvData = event.target.result;
            const lines = csvData.split(/\r\n|\n/);
            const headers = lines[0].split(',').map(h => h.trim());
            const requiredHeaders = ['name', 'herstellernummer', 'quantity', 'minStock', 'maxStock', 'supplier', 'storageLocation', 'expiryDate'];
            
            if (requiredHeaders.some((h, i) => headers[i] !== h)) {
                 setError(`Falsches Spaltenformat. Erwartet: ${requiredHeaders.join(', ')}`);
                 setIsImporting(false);
                 return;
            }

            const inventoryPath = `artifacts/${appId}/users/${userId}/inventory`;
            const batch = writeBatch(db);

            for (let i = 1; i < lines.length; i++) {
                const data = lines[i].split(',');
                if (data.length === headers.length) {
                    const newItem = {
                        name: data[0] || '',
                        herstellernummer: data[1] || '',
                        quantity: Number(data[2]) || 0,
                        minStock: Number(data[3]) || 1,
                        maxStock: Number(data[4]) || null,
                        supplier: data[5] || '',
                        storageLocation: data[6] || '',
                        expiryDate: data[7] || '',
                        lastUpdated: serverTimestamp(),
                    };
                    const docRef = doc(collection(db, inventoryPath));
                    batch.set(docRef, newItem);
                }
            }
            try {
                await batch.commit();
                onClose();
            } catch (err) {
                console.error("Import Error:", err);
                setError("Fehler beim Importieren der Daten.");
            } finally {
                setIsImporting(false);
            }
        };
        reader.readAsText(file);
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title="Artikel per CSV importieren">
            <div className="p-6">
                <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-6" role="alert">
                    <p className="font-bold">Anleitung</p>
                    <p className="text-sm">Bitte stellen Sie sicher, dass Ihre CSV-Datei die folgenden Spalten in exakt dieser Reihenfolge enthält. Lassen Sie Felder leer, wenn kein Wert vorhanden ist (z.B. `,,` für ein leeres Feld).</p>
                    <code className="text-xs block bg-gray-200 p-2 rounded mt-2">name,herstellernummer,quantity,minStock,maxStock,supplier,storageLocation,expiryDate</code>
                    <p className="text-sm mt-2">Beispielzeile für einen Artikel ohne Lieferanten:</p>
                    <code className="text-xs block bg-gray-200 p-2 rounded mt-2">Kompositspritze A2,987654321,10,5,20,,Schublade 3,2025-12-31</code>
                </div>
                
                <input type="file" accept=".csv" ref={fileInputRef} onChange={handleFileChange} className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"/>

                {error && <p className="text-red-500 text-sm mt-4">{error}</p>}

                <div className="mt-6 flex justify-end gap-3">
                    <button type="button" onClick={onClose} className="bg-gray-200 px-4 py-2 rounded-lg">Abbrechen</button>
                    <button onClick={handleImport} className="bg-blue-600 text-white px-4 py-2 rounded-lg" disabled={!file || isImporting}>
                        {isImporting ? "Importiere..." : "Importieren"}
                    </button>
                </div>
            </div>
        </Modal>
    );
};

const ItemSelectionModal = ({ isOpen, onClose, inventory, onItemSelected, transactionType }) => {
    const [searchTerm, setSearchTerm] = useState('');
    const [filteredItems, setFilteredItems] = useState([]);
    const [showScanner, setShowScanner] = useState(false);

    useEffect(() => {
        if (isOpen) {
            setFilteredItems(inventory);
            setSearchTerm('');
            setShowScanner(false);
        }
    }, [isOpen, inventory]);

    useEffect(() => {
        const results = inventory.filter(item =>
            (item.name?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
            (item.interneArtikelnummer?.toLowerCase() || '').includes(searchTerm.toLowerCase())
        );
        setFilteredItems(results);
    }, [searchTerm, inventory]);

    const handleSelect = (item) => {
        onItemSelected(item, transactionType);
    };
    
    useEffect(() => {
        if (!isOpen || !showScanner) return;

        let html5QrcodeScanner;
        const onScanSuccess = (decodedText) => {
            const foundItem = inventory.find(item => item.interneArtikelnummer === decodedText || item.herstellernummer === decodedText);
            if (foundItem) {
                handleSelect(foundItem);
            } else {
                alert(`Artikel mit der Nummer "${decodedText}" nicht gefunden.`);
                setShowScanner(false);
            }
        };
        const onScanFailure = (error) => {};

        if (window.Html5QrcodeScanner) {
            html5QrcodeScanner = new window.Html5QrcodeScanner("item-selection-scanner", { fps: 10, qrbox: { width: 250, height: 250 } }, false);
            html5QrcodeScanner.render(onScanSuccess, onScanFailure);
        }

        return () => {
            if (html5QrcodeScanner) {
                html5QrcodeScanner.clear().catch(err => console.error("Cleanup failed", err));
            }
        };
    }, [isOpen, showScanner, inventory, transactionType, onItemSelected]);


    return (
        <Modal isOpen={isOpen} onClose={onClose} title={`Artikel für ${transactionType} auswählen`} size="lg">
            {showScanner ? (
                 <div className="p-6">
                    <div id="item-selection-scanner" className="w-full"></div>
                    <button onClick={() => setShowScanner(false)} className="mt-4 w-full bg-gray-200 px-4 py-2 rounded-lg">Zurück zur Suche</button>
                </div>
            ) : (
                <div className="p-6">
                    <div className="flex items-center gap-2 mb-4">
                         <input
                            type="text"
                            placeholder="Artikel suchen..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="w-full p-2 border rounded-md"
                        />
                        <button type="button" onClick={() => setShowScanner(true)} className="p-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                            <Icon path={icons.camera} className="h-5 w-5" />
                        </button>
                    </div>
                    <ul className="max-h-96 overflow-y-auto divide-y divide-gray-200">
                        {filteredItems.map(item => (
                            <li key={item.id} onClick={() => handleSelect(item)} className="p-2 hover:bg-gray-100 cursor-pointer">
                                {item.name} <span className="text-sm text-gray-500">({item.interneArtikelnummer})</span>
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </Modal>
    );
};

export default App;
